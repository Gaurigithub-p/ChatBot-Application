pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-south-1'
        ECR_REPO = '913524937689.dkr.ecr.ap-south-1.amazonaws.com/chatbot'
        IMAGE_TAG = "v${BUILD_NUMBER}" // Unique tag for each build
        CLUSTER_NAME = 'chatbot-eks-cluster'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', credentialsId: 'f9be0753-932d-4f9f-b286-89574ea3d66c', url: 'https://github.com/Gaurigithub-p/ChatBot-Application.git'
            }
        }

        stage('npm Build') {
            steps {
                dir('project') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Docker Build & Push to ECR') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'aws-ecr-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh '''
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                            aws configure set default.region $AWS_REGION

                            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

                            echo "Building Docker image with tag: $IMAGE_TAG"
                            docker build -t $ECR_REPO:$IMAGE_TAG project/
                            docker push $ECR_REPO:$IMAGE_TAG
                            docker rmi $ECR_REPO:$IMAGE_TAG || true
                        '''
                    }
                }
            }
        }

        stage('Terraform Apply - Create EKS Cluster') {
            steps {
                dir('project/infra') {
                    sh '''
                        terraform init
                        terraform plan
                        terraform apply -auto-approve
                    '''
                }
            }
        }

        stage('Connect Kubectl to EKS Cluster') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'aws-ecr-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh '''
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                            aws configure set default.region $AWS_REGION

                            echo "Updating kubeconfig..."
                            aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

                            echo "Verifying cluster connection..."
                            kubectl cluster-info
                            kubectl get nodes
                        '''
                    }
                }
            }
        }

        stage('Deploy to EKS using Pod') {
            steps {
                script {
                    sh '''
                        # Update deployment with latest image
                        kubectl set image deployment/chatbot-ui chatbot-ui=$ECR_REPO:$IMAGE_TAG -n default || true
                        
                        # Apply deployment YAML if not present
                        kubectl apply -f project/k8/deployment.yaml

                        # Apply service YAML to expose application
                        kubectl apply -f project/k8/service.yaml
                    '''
                }
            }
        }

        stage('Get LoadBalancer URL') {
            steps {
                script {
                    sh "sleep 30"  // Give time for LoadBalancer IP to come
                    def loadBalancerUrl = sh(script: "kubectl get svc chatbot-ui-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'", returnStdout: true).trim()

                    if (loadBalancerUrl) {
                        echo "üéØ Your application is accessible at: http://${loadBalancerUrl}"
                    } else {
                        echo "‚è≥ Waiting for LoadBalancer to be provisioned... Check manually after few seconds."
                    }
                }
            }
        }
    }
}
